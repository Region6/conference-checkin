/*! ConferenceCheckin - v0.2.0 - 2014-05-03 */var App = {

    initialize: function() {
        _.bindAll(this, "ioEvent", "fetchCheckedIn");

        //Initialize Socket.IO
        this.Io = io.connect();
        // Listen for the talk event.
        this.Io.on('talk', this.ioEvent);

        //If Backbone sync gets an unauthorized header, it means the user's
        //session has expired, so send them back to the homepage
        var sync = Backbone.sync;
        Backbone.sync = function(method, model, options) {
            options.error = function(xhr, ajaxOptions, thrownError) {
                if (xhr.status == 401) {
                    window.location = '/';
                }
            };
            sync(method, model, options);
        };
        this.fetchCheckedIn();
        this.Models = {};
        this.Router = new Router();
        Backbone.history.start({pushState: true});
        this.Models.events = new Events();
        this.Models.events.fetch();
        var self = this;

    },

    ioEvent: function(data) {
        console.log(data);

        if (App.uid != data.uid) {
            if (data.objectType == "registrant") {
                var model = App.Models.registrants.get(parseInt(data.objectId));
                if (model) {
                    if ("fetch" in model) {
                        model.fetch({success: function(model, response, options){
                            Backbone.trigger("updateGrid", model);
                        }});
                    } else {
                        console.log("missing model:", data.objectId);
                    }
                } else {
                    console.log("missing model:", data.objectId);
                }

                //this.Models.registrants.unshift(data);
            } else if (data.objectType == "updates") {
                if (data.modType == "checkedIn") {
                    $(".checkedInNumber").text(data.objectId);
                }
            }
        }
        /*
        if (data.type == "review-submitted") {
            var message = data.doc.versions[0].personnel[0].uinName + " was submitted for review.";
            $('.top-right').notify({ message: { text: message }, type: 'bangTidy', fadeOut: { enabled: true, delay: 8000 } }).show();
        }
        */

    },

    fetchCheckedIn: function() {
        $.getJSON('/api/getNumberCheckedIn', function(data) {
            $(".checkedInNumber").text(data.checkedIn);
        });
    }

};

Swag.registerHelpers(Handlebars);
//  format an ISO date using Moment.js
//  http://momentjs.com/
//  moment syntax example: moment(Date("2011-07-18T15:50:52")).format("MMMM YYYY")
//  usage: {{dateFormat creation_date format="MMMM YYYY"}}
Handlebars.registerHelper('dateFormat', function(context, block) {
  if (window.moment && context !== null) {
    var f = block.hash.format || "MMM Do, YYYY";
    //return moment(context.replace("Z","")).format(f);
    return moment(context).format(f);
  }else{
    return context;   //  moment plugin not available. return data as is.
  }
});

// usage: {{fromNow date}}
Handlebars.registerHelper('fromNow', function(date) {
    return moment(date).fromNow();
});


// Comparison Helper for handlebars.js
// Pass in two values that you want and specify what the operator should be
// e.g. {{#compare val1 val2 operator="=="}}{{/compare}}

Handlebars.registerHelper('compare', function(lvalue, rvalue, options) {

    if (arguments.length < 3)
        throw new Error("Handlerbars Helper 'compare' needs 2 parameters");

    operator = options.hash.operator || "==";

    var operators = {
        '==':       function(l,r) { return l == r; },
        '===':      function(l,r) { return l === r; },
        '!=':       function(l,r) { return l != r; },
        '<':        function(l,r) { return l < r; },
        '>':        function(l,r) { return l > r; },
        '<=':       function(l,r) { return l <= r; },
        '>=':       function(l,r) { return l >= r; },
        'typeof':   function(l,r) { return typeof l == r; }
    };

    if (!operators[operator])
        throw new Error("Handlerbars Helper 'compare' doesn't know the operator "+operator);

    var result = operators[operator](lvalue,rvalue);

    if( result ) {
        return options.fn(this);
    } else {
        return options.inverse(this);
    }
});

Handlebars.registerHelper('iter', function(context, options) {
    var fn = options.fn, inverse = options.inverse;
    var ret = "";

    if(context && context.length > 0) {
        for(var i=0, j=context.length; i<j; i++) {
            ret = ret + fn(_.extend({}, context[i], { i: i, iPlus1: i + 1 }));
        }
    } else {
        ret = inverse(this);
    }
    return ret;
});

function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

Backbone.Form.template = _.template('<form role="form" data-fieldsets></form>');

Backbone.Form.Field.template = _.template('<div class="form-group field-<%= key %>"><label class="col-sm-12 control-label" for="<%= editorId %>"><%= title %></label><div class="col-sm-12"><span data-editor></span><p class="help-block" data-error></p><p class="help-block"><%= help %></p></div></div>');

var Biller = Backbone.SuperModel.extend({
    //urlRoot: '/api/registrant',
    idAttribute: "id",
    initialize: function() {

    },
    urlRoot: "/api/biller/"
});

var Event = Backbone.Model.extend({
    idAttribute: "id",
    initialize: function() {

    },
    url: function(){
        return this.parent.url() + "/event/"+this.id;
    }
});

var Events = Backbone.Collection.extend({
    model: Event,
    idAttribute: "id",
    url: "/api/events"
});

var LinkedRegistrant = Backbone.SuperModel.extend({
  //urlRoot: '/api/registrant',
  idAttribute: "registrantId",
  urlRoot: "/api/registrant/",
  relations: {
    'linked': LinkedRegistrant,
    'payments': Payment,
    'biller': Biller
  }
});

var LinkedRegistrants = Backbone.Collection.extend({
    model: LinkedRegistrant,
    idAttribute: "id",
    url: function(){
        return this.parent.url() + "/linkedRegistrants";
    }
});

var Payment = Backbone.SuperModel.extend({
    //urlRoot: '/api/registrant',
    idAttribute: "id",
    initialize: function() {

    },
    urlRoot: "/api/payment/"
});

var Payments = Backbone.Collection.extend({
    model: Payment,
    idAttribute: "id",
    url: function(){
        return this.parent.url() + "/payments";
    }
});

var Registrant = Backbone.SuperModel.extend({
  //urlRoot: '/api/registrant',
  idAttribute: "registrantId",
  urlRoot: "/api/registrant/",
  relations: {
    'linked': Registrant,
    'payments': Payment,
    'biller': Biller
  }
});

var RegistrantBiller = Backbone.Collection.extend({
    model: Registrant,
    idAttribute: "id",
    url: function(){
        return this.parent.url() + "/biller";
    }
});

var Registrants = Backbone.PageableCollection.extend({
    model: Registrant,
    urlRoot: '/api/registrants',
    initialize: function(models, opts) {
        opts = (typeof opts != 'undefined') ? opts : {};
        if ("term" in opts) {
            this.term = opts.term;
        }
        if ("category" in opts) {
            this.category = opts.category;
        }
    },

    url: function() {
        var url = '';
        if (this.term && this.category) {
            // pass ids as you would a multi-select so the server will parse them into
            // a list for you.  if it's rails you'd do: id[]=
            url = '/api/registrants/'+this.category+'/'+this.term;
            // clear out send_ids
            this.search = undefined;
        } else {
            url = '/api/registrants/all/all';
        }
        return url;
    },

    // Any `state` or `queryParam` you override in a subclass will be merged with
    // the defaults in `Backbone.PageableCollection` 's prototype.
    state: {

        // You can use 0-based or 1-based indices, the default is 1-based.
        // You can set to 0-based by setting ``firstPage`` to 0.
        firstPage: 0,

        // Set this to the initial page index if different from `firstPage`. Can
        // also be 0-based or 1-based.
        currentPage: 0,

        // Required under server-mode
        totalRecords: null,
        pageSize: 10
    },

    fetch: function(opts) {
        opts = (typeof opts != 'undefined') ? opts : {};
        if ("data" in opts) {
            if ("term" in opts.data) {
                this.term = opts.data.term;
            }
            if ("category" in opts.data) {
                this.category = opts.data.category;
            }
            opts.data = undefined;
        }
        return Backbone.PageableCollection.prototype.fetch.call(this, opts);
    }
});

var Router = Backbone.Router.extend({

    routes: {
        "":                                     "index",
        "registrant/:registrantId":             "registrant",
        "dash":                                 "dash"
    },

    views: {},

    initialize: function() {
        _.bindAll(this, 'index',  'registrant', 'dash', 'setBody');

        //Create all the views, but don't render them on screen until needed
        this.views.app = new AppView({ el: $('body') });
        //this.views.tags = new TagsView();
        //this.views.account = new AccountView();

        //The "app view" is the layout, containing the header and footer, for the app
        //The body area is rendered by other views
        this.view = this.views.app;
        this.view.render();
        this.currentView = null;
    },

    index: function() {
        //if the user is logged in, show their documents, otherwise show the signup form
        this.navigate("dash", true);
        /**
        this.views.dash = new DashboardView();
        App.Io.emit('ready', {'user': App.uid});
        this.setBody(this.views.dash, true);
        this.view.body.render();
        **/
    },

    registrant: function(registrantId) {
        var registrant = App.Models.registrants.get(registrantId);
        this.views.main = new RegistrantView({ model: registrant });
        this.setBody(this.views.main, true);
        this.view.body.render();
    },

    dash: function() {
        this.views.dash = new DashboardView();
        App.Io.emit('ready', {'user': App.uid});
        this.setBody(this.views.dash, true);
        this.view.body.render();
    },

    setBody: function(view, auth) {
        /**
        if (auth == true && typeof App.user == 'undefined') {
            this.navigate("", true);
            return;
        }
        **/
        if (typeof this.view.body != 'undefined') {
            this.view.body.unrender();
        }
        App.CurrentView = view;
        this.view.body = view;
    }

});

var AcceptPaymentView = Backbone.View.extend({
    events: {
        "click .cc"             :   "renderCC",
        "click .mcc"            :   "renderMCC",
        "click .ck"             :   "renderCheck",
        "keypress #swipe"       :   "makePaymentOnEnter"
    },

    initialize: function(opts) {
        _.bindAll(this, 'render', 'makePayment', 'makePaymentOnEnter', 'renderCC', 'renderMCC', 'renderCheck', 'shown');
        this.parent = opts.parent;
        this.bind("ok", this.makePayment);
        this.bind("shown", this.shown);
        this.genEvent = App.Models.events.where({reg_type: "general", member: 1})[0];
        this.months = [
            { val: 1, label: '01 Jan' },
            { val: 2, label: '02 Feb' },
            { val: 3, label: '03 Mar' },
            { val: 4, label: '04 Apr' },
            { val: 5, label: '05 May' },
            { val: 6, label: '06 Jun' },
            { val: 7, label: '07 Jul' },
            { val: 8, label: '08 Aug' },
            { val: 9, label: '09 Sep' },
            { val: 10, label: '10 Oct' },
            { val: 11, label: '11 Nov' },
            { val: 12, label: '12 Dec' }
        ];
        this.creditCards = {
            "visa": "v",
            "mastercard": "m",
            "discover": "d",
            "amex": "a"
        };
    },

    render: function() {
        var template    = Templates.acceptPayment(),
            vars        = this.model.attributes,
            view        = this;

        this.$el.html(template);
        this.renderCC();
        $(".payment", this.$el).button();
        $(".cc", this.$el).button('toggle');
        return this;
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    renderCC: function() {
        var view = this;
        this.form = new Backbone.Form({
            schema: {
                amount: {type:"Number", title:"Amount to be charged"},
                swipe: {type: "Text"}
            }
        }).render();

        $(".paymentControls", this.$el).html(this.form.$el);

        $('.paymentControls form', this.$el).bind("keypress", function(e) {
            var code = e.keyCode || e.which;
            if (code  == 13) {
                e.preventDefault();
                view.makePayment(e);
                return false;
            }
        });
        $("#swipe", this.$el).focus();

    },

    renderMCC: function() {
        var view = this;
        this.form = new Backbone.Form({
            schema: {
                amount: {type:"Number", title:"Amount to be charged"},
                fullName: {type: "Text", title:"Card Holder's Name"},
                cardNumber: {type: "Text", title:"Card Number"},
                address: {type: "Text", title:"Street Address"},
                city: {type: "Text", title:"City"},
                state: {type: "Text", title:"State"},
                zip: {type: "Text", title:"Zip"},
                expirationMonth: { type: "Select", options: this.months, title: "Expiration Month" },
                expirationYear: { type: "Select", options: ["2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"], title: "Expiration Year" },
                cardCode: { type: "Text", title:"Card Security Number" },
            },
            data: {
                fullName: this.parent.model.get("firstname") + " " + this.parent.model.get("lastname"),
                address: this.parent.model.get("street1"),
                city: this.parent.model.get("city"),
                state: this.parent.model.get("state"),
                zip: this.parent.model.get("zipcode"),
            }
        }).render();

        $(".paymentControls", this.$el).html(this.form.$el);
        $("#creditCardTypes", this.$el).show();

        $("#cardNumber", this.$el).validateCreditCard(function(result){
                if (result.luhn_valid) {
                    console.log('CC type: ' + result.card_type.name +
                      '\nLength validation: ' + result.length_valid +
                      '\nLuhn validation:' + result.luhn_valid);

                    $("#mc", this.$el).toggleClass("mb").toggleClass("mc");
                    $("#vc", this.$el).toggleClass("vb").toggleClass("vc");
                    $("#dc", this.$el).toggleClass("db").toggleClass("dc");
                    $("#ac", this.$el).toggleClass("ab").toggleClass("ac");
                    var active = view.creditCards[result.card_type.name]+"c",
                        inactive = view.creditCards[result.card_type.name]+"b";
                    $("#"+active, this.$el).addClass(active).removeClass(inactive);
                } else {
                    $("#mc", this.$el).removeClass("mb").addClass("mc");
                    $("#vc", this.$el).removeClass("vb").addClass("vc");
                    $("#dc", this.$el).removeClass("db").addClass("dc");
                    $("#ac", this.$el).removeClass("ab").addClass("ac");
                }
            }
        );
    },

    renderCheck: function() {
        var view = this;
        this.form = new Backbone.Form({
            schema: {
                amount: {type:"Number", title:"Amount to be charged"},
                checkNumber: {type: "Text", title:"Check Number"}
            }
        }).render();

        $(".paymentControls", this.$el).html(this.form.$el);
        $("#creditCardTypes", this.$el).hide();
    },

    shown: function(e) {
        $("#swipe", this.$el).focus();
    },

    makePaymentOnEnter: function(e) {
        if (e.keyCode != 13) return;
        e.stopImmediatePropagation();
        //this.makePayment(e);
    },

    makePayment: function(e) {
        var view = this,
            values = this.form.getValue(),
            type = "credit",
            transaction = {
                "transactionType": "authCaptureTransaction",
                "amount": values.amount,
                "payment": {}
            },
            ccData, firstname, lastname, expiration, creditCard;
        if ("swipe" in values) {
            type = "swipe";
            ccData = new CreditCardTrackData(values.swipe);
            firstname = $.trim(ccData.first_name || this.parent.model.get("firstname"));
            lastname = $.trim(ccData.last_name || this.parent.model.get("lastname"));
            expiration = ccData.expiration.slice(2) + "/" + ccData.expiration.slice(0,-2);
            creditCard = {
              "creditCard" : {
                  "cardNumber": ccData.number,
                  "expirationDate": expiration
              }
            };
            transaction.payment = _.extend(
                transaction.payment,
                creditCard
            );
        } else if("checkNumber" in values) {
            type = "check";
            transaction.payment.checkNumber = values.checkNumber;
        } else {
            creditCard = {
              "creditCard" : {
                "cardNumber": values.cardNumber,
                "expirationDate": values.expirationMonth+"/"+values.expirationYear,
                "cardCode": values.cardCode
              }
            };
            var name = values.fullName.split(" ");
            transaction.payment = _.extend(
                transaction.payment,
                creditCard
            );
            firstname = name[0];
            lastname = "";
            if (name.length > 2) {
                lastname = name[2];
            } else {
                lastname = name[1];
            }
        }
        var orderInfo =  {
            "order": {
                "invoiceNumber": this.parent.model.get("confirmation")
            },
            "customer": {
                "email": this.parent.model.get("email")
            },
            "billTo":{},
            "shipTo":{}
        };
        transaction = _.extend(
            transaction,
            orderInfo
        );
        transaction.shipTo.firstName = transaction.billTo.firstName = firstname;
        transaction.shipTo.lastName = transaction.billTo.lastName = lastname;
        var address = {
            "address": values.address || this.parent.model.get("street1"),
            "city": values.city || this.parent.model.get("city"),
            "state": values.state || this.parent.model.get("state"),
            "zip": values.zip || this.parent.model.get("zipcode")
        };
        if (("swipe" in values) === false) {
            transaction.billTo = _.extend(
                transaction.billTo,
                address
            );
        }
        transaction.shipTo = _.extend(
            transaction.shipTo,
            address
        );

        this.model.set({registrant: this.parent.model, transaction:transaction, type: type});
        this.model.save({}, {success: function(model, response, options) {
            console.log(response);
            if ("code" in response) {
                if ("transactionResponse" in response) {
                    view.parent.errors = response.transactionResponse.errors;
                    view.parent.renderError();
                }
            } else if (response.creditResult.transaction.responseCode == 2) {
                view.parent.errors = response.creditResult.transaction.errors;
                view.parent.renderError();
            }
            view.unrender();
            view.parent.acceptPaymentModal.close();
            view.parent.fetch("payment");
        }});
    }

});

var AddRegistrantView = Backbone.View.extend({
    events: {
        "change #eventSelect"        :   "changeForm"
    },

    initialize: function(opts) {
        _.bindAll(this, 'render', 'okClicked', "changeForm", 'renderForm', 'renderEventSel');
        this.parent = opts.parent;
        this.bind("ok", this.okClicked);
        var search = (opts.eventId) ? {eventId: opts.eventId} : {reg_type: "general", member: 1};
        this.genEvent = App.Models.events.where(search)[0];
    },

    render: function() {
        var vars        = this.model.attributes,
            html        = Templates.addRegistrant(vars),
            view        = this;

        this.$el.html(html);
        this.renderForm();
        this.renderEventSel();
        return this;
    },

    renderForm: function() {
        this.form = new Backbone.Form({
            schema: this.genEvent.get('fields'),
            fieldsets: [{
                "fields": this.genEvent.get("fieldset")
            }]
        }).render();

        $(".addRegForm", this.$el).html(this.form.$el);
    },

    renderEventSel: function() {
        var eventSel = '<select data-width="450px" class="evSelectPicker" id="eventSelect">';
        _(App.Models.events.models).each(function(event) {
            eventSel += '<option value="'+event.get("eventId")+'">'+event.get("title")+'</option>';
        });
        eventSel += '</select><br />';
        $(".eventSelect", this.$el).html(eventSel);
        $('.evSelectPicker', this.$el).selectpicker();
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    okClicked: function (modal) {
        this.model.set(this.form.getValue()); // runs schema validation
        this.model.set({
            "eventId": this.genEvent.get('eventId'),
            "slabId": this.genEvent.get('local_slabId')
        });
        this.model.save({}, {success: function(model, response, options) {
            App.Models.registrants.reset(model);
            App.Router.navigate("registrant/"+model.id, true);
        }});
    },

    changeForm: function(e) {
        var eventId = e.target.value,
            search = {eventId: eventId};
        this.genEvent = App.Models.events.where(search)[0];
        this.renderForm();
    }

});

var AppView = Backbone.View.extend({

    events: {
        "click  #btn-home":            "home"
    },

    initialize: function() {
        _.bindAll(this, 'render', 'home', 'login');
        this.currentRegistrant = {};
    },

    render: function() {
        var html = Templates.header();
        $('#header').html(html);
    },

    home: function(e) {
        e.preventDefault();
        App.Router.navigate("dash", true);
    },

    login: function(e) {
        e.preventDefault();

        var username = $('#frm-login input[name=username]').val();
        var password = $('#frm-login input[name=password]').val();

        $.ajax({
            type: 'POST',
            url: '/json/login',
            dataType: 'json',
            data: { username: username, password: password },
            success: function(data) {
                $('#header .public').hide();
                $('#header .logged-in').show();
                App.user = data;
                App.router.navigate("documents", true);
            },
            error: function() {
                $('#login-error').html("<button type='button' class='close' data-dismiss='alert'>&times;</button>Invalid UIN and/or SSO password.").addClass('alert fade in');
                $(".alert").alert();
            }
        });

    }

});

var ChangeConfirmationView = Backbone.View.extend({
    events: {
        "keypress #confirmnum"      :   "changeConfirmationOnEnter"
    },

    initialize: function(opts) {
        _.bindAll(this, 'render', 'changeConfirmation', 'changeConfirmationOnEnter');
        this.parent = opts.parent;
        this.bind("ok", this.changeConfirmation);
        this.bind("shown", this.shown);
    },

    render: function() {
        var vars        = this.model.attributes,
            view        = this;

        this.form = new Backbone.Form({
            schema: {
                confirmnum: {type:"Text", title:"Confirmation #"}
            },
            data: {
                confirmnum: this.parent.model.get("confirmation")
            }
        }).render();

        this.$el.append(this.form.$el);
        return this;
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    shown: function(e) {
        $("#confirmnum", this.$el).focus();
    },

    changeConfirmationOnEnter: function(e) {
        if (e.keyCode != 13) return;
        //this.makePayment(e);
    },

    changeConfirmation: function(e) {
        var values = this.form.getValue(),
            view = this;
        this.model.save({"confirmnum": values.confirmnum}, {patch: true, success: function(model, response) {
            view.parent.savedRegistrant(model, view);
            modal.close();
        }});
    }

});

var DashboardView = Backbone.View.extend({
    className: "col-md-12",
    events: {
        "click .search"             :   "search",
        "click .clear"              :   "clearSearch",
        "click .addNewRegistrant"   :   "addNewRegistrant",
        "keypress #searchText"      :   "searchOnEnter"
    },

    initialize: function() {
        _.bindAll(this, 'fetch', 'render', 'unrender', "addDocument", "search", "searchOnEnter", "addNewRegistrant", "clearSearch");

        this.registrantsView = new RegistrantsView({parent: this});
        //this.timelineView = new TimelineView({parent: this});

    },

    fetch: function(options) {

    },

    assign : function (view, selector) {
        view.setElement(this.$(selector)).render();
    },

    render: function() {
        var template = Templates.dashboard(),
            view = this;

        this.$el.html(template);
        $('#app').append(this.el);
        //this.timelineView.fetch();
        //$("#timelineHolder", this.$el).append(this.timelineView.el);
        //this.registrantsView.fetch();
        $("#regTable", this.$el).append(this.registrantsView.render().$el);
        $('.selectpicker', this.$el).selectpicker();
        $('#searchText', this.$el).focus();
        return this;

    },

    addNewRegistrant: function(e) {
        var newReg = new Registrant();
            view = new AddRegistrantView({parent: this, model:newReg});
        this.addRegModal = new Backbone.BootstrapModal({ title: 'Add Registrant', content: view });
        this.addRegModal.open();

    },

    search: function(e) {
        e.preventDefault();
        var term = $("#searchText", this.$el).val(),
            category = $("#category", this.$el).val();
        App.Models.registrants.state.currentPage = 0;
        if (term.indexOf("|") != -1) {
            term = term.split("|")[0];
            category = "registrantid";
        }
        App.Models.registrants.fetch({ data: { category: category, term: term } });
    },

    searchOnEnter: function(e) {
        if (e.keyCode != 13) return;
        this.search(e);
    },

    clearSearch: function(e) {
        $("#searchText", this.$el).val("");
        $('#searchText', this.$el).focus();
    },

    unrender: function () {

        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.model.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node

    },

    addDocument: function(e) {
        var action = "project";
        if (e.srcElement.attributes["data-id"].value == "project") {
            action = "project";
        } else if (e.srcElement.attributes["data-id"].value == "item") {
            action = "item";
        } else {
            action = e.srcElement.attributes["data-id"].value;
        }
        App.router.navigate("add/document/"+action, true);
    }

});

var EventView = Backbone.View.extend({
    events: {

    },

    initialize: function() {
        _.bindAll(this, 'render', 'close');
        $(this.el).addClass('row-fluid event-row');
        this.options.parent.on('close:all', this.close, this); // Event listener on parent
    },

    render: function() {
        var html = Templates.event(this.model.attributes);
        $(this.el).html(html);
    },

   close: function () {

        console.log('Kill: ', this.cid);

        //this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.model.unbind( 'change', this.render, this ); // Unbind reference to the model
        this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node

    }

});

var LinkedRegistrantView = Backbone.View.extend({
    tagName: 'tr',
    events: {
        "click .checkLinkedIn"            :   "checkIn",
        "click .checkLinkedOut"           :   "checkOut",
        "click .edit"               :   "edit"
    },

    initialize: function(opts) {
        _.bindAll(this, 'render', 'checkIn', 'checkOut', 'edit');
        this.options = opts;
        this.options.parent.on('close:all', this.unrender, this); // Event listener on parent
        this.model.on('change', this.render, this); // Event listener on collection
        this.model.id = this.model.get("registrantId");
        this.model.urlRoot = "/api/registrant/";
    },

    render: function() {
        var vars        = this.model.attributes,
            view        = this,
            html = Templates.linkedRegistrant(vars);
        this.$el.html(html);
        return this;
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    goBack: function(e) {
        App.Router.navigate("dash", true);
    },

    checkIn: function(e) {
        var view = this;
        this.model.id = this.model.get("registrantId");
        this.model.save({"fields": {"attend": true}}, {patch: true});
    },

    checkOut: function(e) {
        var view = this;
        this.model.id = this.model.get("registrantId");
        this.model.save({"fields": {"attend": false}}, {patch: true});
    },

    edit: function(e) {
        App.Router.navigate("/registrant/"+this.model.get("registrantId"), true);
    }

});

var RegistrantPaymentView = Backbone.View.extend({
    tagName: 'tr',
    events: {

    },

    initialize: function(opts) {
        _.bindAll(this, 'render');
        this.options = opts;
        this.options.parent.on('close:all', this.unrender, this); // Event listener on parent
    },

    render: function() {
        var vars        = this.model.attributes,
            html        = Templates.payment(vars),
            view        = this;
        this.$el.html(html);
        return this;
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    goBack: function(e) {
        App.Router.navigate("dash", true);
    }

});

var RegistrantView = Backbone.View.extend({
    events: {
        "click #goBack"             :   "goBack",
        "click #btn-submit"         :   "saveRegistrant",
        "click .acceptPayment"      :   "acceptPayment",
        "click .printBadge"         :   "printBadge",
        "click .downloadBadge"      :   "downloadBadge",
        "click .printReceipt"       :   "printReceipt",
        "click .viewReceipt"        :   "viewReceipt",
        "click .checkIn"            :   "checkIn",
        "click .checkOut"           :   "checkOut",
        "click .changeConfirmation" :   "changeConfirmation"
    },

    initialize: function() {
        _.bindAll(this,
            'render',
            'goBack',
            'saveRegistrant',
            'acceptPayment',
            'printBadge',
            'downloadBadge',
            'printReceipt',
            'checkIn',
            'checkOut',
            'savedRegistrant',
            'changeConfirmation',
            'renderLinked',
            'renderPayment',
            'renderError'
        );
        this.error = null;
        this.model.on('change', this.render, this); // Event listener on collection
    },

    fetch: function(nextAction) {
        var view = this;
        this.model.fetch({success: function(model, response, options) {
            if (typeof nextAction != "undefined") {
                if (nextAction == "linked") {
                    view.renderLinked();
                } else if (nextAction == "payment") {
                    view.renderPayment();
                }
            }
        }});
    },

    render: function() {
        var biller      = this.model.get('biller'),
            vars        = this.model.attributes,
            view        = this;
        var html = Templates.registrant(vars);
        this.$el.html(html);
        $('#app').append(this.$el);

        this.model.get("fields").schema = this.model.get("schema").toJSON();
        biller.schema = biller.get("schema").toJSON();

        this.form = new Backbone.Form({
            model: this.model.get("fields")

        }).render();

        $("#info", this.$el).append(this.form.$el);

        this.billerForm = new Backbone.Form({
            model: biller
        }).render();
        $("#biller", this.$el).append(this.billerForm.$el);

        this.renderLinked();
        this.renderPayment();

        if (this.error ) {
            this.renderError();
        }

        return this;
    },

    renderLinked: function() {
        var view = this;
        $('#linkedRegistrants tbody', view.$el).empty();
        this.model.get("linked").each(function(person) {
            if (view.model.get("id") !== person.get("id")) {
                person.id = person.get("registrantId");
                var personV = new LinkedRegistrantView({ parent: view, model: person });
                personV.on('modelUpdate', view.refresh, view);
                personV.render();
                $('#linkedRegistrants tbody', view.$el).append(personV.$el);
            }
        });
    },

    renderPayment: function() {
        var view = this;
        $('#registrantPayments tbody', view.$el).empty();
        this.model.get("payments").each(function(payment) {
            var paymentV = new RegistrantPaymentView({ parent: view, model: payment });
            paymentV.on('modelUpdate', view.refresh, view);
            paymentV.render();
            $('#registrantPayments tbody', view.$el).append(paymentV.$el);
        });
    },

    renderError: function() {
        var html = '<div class="row-fluid"><div class="span10"><div class="alert alert-error"><button type="button" class="close" data-dismiss="alert">&times;</button>',
            view = this;
        _(this.errors).each(function(error) {
            html += '<p>'+error.errorText+'</p>';
        });
        html += '</div></span></div>';
        $('.registrantBody', view.$el).prepend(html);
        this.errors = null;
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        //this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    goBack: function(e) {
        App.Router.navigate("dash", true);
    },

    saveRegistrant: function(e) {
        var view = this,
            errors = this.form.commit(); // runs schema validation
        this.model.save({},{success: function(model, response) {
            //view.savedRegistrant(model, view);
        }});
    },

    acceptPayment: function(e) {
        var newPay = new Payment();
            view = new AcceptPaymentView({parent: this, model:newPay});
        this.acceptPaymentModal = new Backbone.BootstrapModal({ title: 'Accept Payment', content: view });
        this.acceptPaymentModal.open();

    },

    printBadge: function(e) {
        $.getJSON("/registrant/"+this.model.id+"/badge/print", function(data) {
            console.log(data);
        });
    },

    downloadBadge: function(e) {
        window.open(this.model.id+"/badge/download", '_blank');
    },

    printReceipt: function(e) {
        $.getJSON("/registrant/"+this.model.id+"/receipt/print", function(data) {
            console.log(data);
        });
    },

    viewReceipt: function(e) {
        window.open(this.model.id+"/receipt/view", '_blank');
    },

    checkIn: function(e) {
        var view = this;
        this.model.save({"fields": {"attend": true} }, {patch: true});
    },

    checkOut: function(e) {
        var view = this;
        this.model.save({"fields": {"attend": false} }, {patch: true});
    },

    savedRegistrant: function(model, view) {
        view = this;
        this.model.fetch({success: function(model, response, options) {
            view.render();
        }});
    },

    changeConfirmation: function(e) {
        var view = new ChangeConfirmationView({parent: this, model:this.model});
        this.changeConfirmationModal = new Backbone.BootstrapModal({ title: 'Change Confirmation', content: view });
        this.changeConfirmationModal.open();

    }
});

var RegistrantsView = Backbone.View.extend({
    events: {

    },

    initialize: function() {
        _.bindAll(this, 'fetch', 'render', 'unrender', 'savedRegistrant', 'renderRow');

        this.collection = new Registrants();
        App.Models.registrants = this.collection;
        //this.collection.on('reset', this.render, this); // Event listener on collection
        //this.collection.on("sync", this.render, this);
        Backbone.on("updateGrid", this.renderRow, this);

        //this.options.parent.on('close:all', this.unrender, this); // Event listener on parent

    },

    fetch: function(options) {
        this.search = false;
        if (typeof options != 'undefined') {
            this.search = true;
        }
        this.collection.fetch(options);
    },

    render: function() {
        var template = Templates.registrants(),
            view = this,
            HtmlCell = Backgrid.StringCell.extend({
                render: function () {
                    this.$el.html(this.model.get(this.column.get("name")));
                    return this;
                }
            }),
            columns = [
                {
                    name: "fields.infoField", // The key of the model attribute
                    label: "Status", // The name to display in the header
                    editable: false, // By default every cell in a column is editable, but *ID* shouldn't be
                    // Defines a cell type, and ID is displayed as an integer without the ',' separating 1000s.
                    cell:  Backgrid.StringCell.extend({
                        render: function () {
                            //this.$el.empty();
                            var values = {
                                    "attend": this.model.get("attend"),
                                    "paid": this.model.get("paid")
                                },
                                html = Templates.infoField(values);
                            this.$el.html(html);
                            //this.delegateEvents();
                            return this;
                        }
                    })
                },
                {
                    name: "registrantId",
                    label: "ID",
                    editable: false,
                    // The cell type can be a reference of a Backgrid.Cell subclass, any Backgrid.Cell subclass instances like *id* above, or a string
                    cell: "string" // This is converted to "StringCell" and a corresponding class in the Backgrid package namespace is looked up
                },
                {
                    name: "confirmation",
                    label: "Confirmation",
                    editable: false,
                    // The cell type can be a reference of a Backgrid.Cell subclass, any Backgrid.Cell subclass instances like *id* above, or a string
                    cell: "string" // This is converted to "StringCell" and a corresponding class in the Backgrid package namespace is looked up
                },
                {
                    name: "lastname",
                    label: "Last Name",
                    editable: false,
                    // The cell type can be a reference of a Backgrid.Cell subclass, any Backgrid.Cell subclass instances like *id* above, or a string
                    cell: "string" // This is converted to "StringCell" and a corresponding class in the Backgrid package namespace is looked up
                },
                {
                  name: "firstname",
                  label: "First Name",
                  editable: false,
                  cell: "string"
                },
                {
                  name: "company",
                  label: "Company",
                  editable: false,
                  cell: "string" // A cell type for floating point value, defaults to have a precision 2 decimal numbers
                },
                {
                    name: "action",
                    label: "",
                    editable: false,
                    cell: Backgrid.Cell.extend({
                        events: {
                          "dblclick":               "edit",
                          "click .printBadge":      "printBadge",
                          "click .downloadBadge":   "downloadBadge",
                          "click .viewReceipt":     "viewReceipt",
                          "click .printReceipt":    "printReceipt",
                          "click .editRegistrant":  "editRegistrant",
                          "click .checkinRegistrant":  "checkinRegistrant",
                          "click .checkoutRegistrant": "checkoutRegistrant"
                        },
                        // Copy/paste Backgrid's render in here
                        render: function () {
                            //this.$el.children().detach();
                            var values = {
                                    "attend": this.model.get("attend"),
                                    "paid": this.model.get("paid")
                                },
                                html = Templates.documentDropdown(values);
                            this.$el.html(html);
                            this.delegateEvents();
                            return this;
                        },

                        printBadge: function(e) {
                            e.preventDefault();
                            $.getJSON("registrant/"+this.model.id+"/badge/print", function(data) {
                                console.log(data);
                            });
                        },

                        downloadBadge: function(e) {
                            e.preventDefault();
                            window.open("registrant/"+this.model.id+"/badge/download", '_blank');
                        },

                        viewReceipt: function(e) {
                            e.preventDefault();
                            window.open("registrant/"+this.model.id+"/receipt/view", '_blank');
                        },

                        printReceipt: function(e) {
                            e.preventDefault();
                            $.getJSON("registrant/"+this.model.id+"/receipt/print", function(data) {
                                console.log(data);
                            });
                        },

                        editRegistrant: function(e) {
                            e.preventDefault();
                            App.Router.navigate("registrant/"+this.model.id, true);
                        },

                        checkinRegistrant: function(e) {
                            e.preventDefault();
                            this.model.save({'fields': {"attend": true}}, {patch: true, success: function(model, response) {
                                view.renderRow(model, view);
                            }});
                        },

                        checkoutRegistrant: function(e) {
                            e.preventDefault();
                            this.model.save({'fields': {"attend": false}}, {patch: true, success: function(model, response) {
                                view.renderRow(model, view);
                            }});
                        }


                    })
                }
            ];
        Backbone.on("menuclicked", function (e, model, view) {
            console.log(e, model);
            if (e.target.className == "printBadge") {
                $.getJSON("registrant/"+model.id+"/badge/print", function(data) {
                    console.log(data);
                });
            } else if (e.target.className == "downloadBadge") {
                window.open("registrant/"+model.id+"/badge/download", '_blank');
            } else if (e.target.className == "viewReceipt") {
                window.open("registrant/"+model.id+"/receipt/view", '_blank');
            } else if (e.target.className == "printReceipt") {
                $.getJSON("registrant/"+model.id+"/receipt/print", function(data) {
                    console.log(data);
                });
            } else if (e.target.className == "editRegistrant") {
                App.Router.navigate("registrant/"+model.id, true);
            } else if (e.target.className == "checkinRegistrant") {
                model.save({'fields': {"attend": true}}, {patch: true, success: function(model, response) {
                    view.savedRegistrant(model, view);
                }});
            } else if (e.target.className == "checkoutRegistrant") {
                model.save({'fields': {"attend": false}}, {patch: true, success: function(model, response) {
                    view.savedRegistrant(model, view);
                }});
            } else {
                App.Router.navigate("registrant/"+model.id, true);
            }
        });
        this.pageableGrid = new Backgrid.Grid({
            columns: columns,
            collection: this.collection
        });

        this.paginator = new Backgrid.Extension.Paginator({

          // If you anticipate a large number of pages, you can adjust
          // the number of page handles to show. The sliding window
          // will automatically show the next set of page handles when
          // you click next at the end of a window.
          windowSize: 10, // Default is 10

          // Used to multiple windowSize to yield a number of pages to slide,
          // in the case the number is 5
          slideScale: 0.5, // Default is 0.5

          // Whether sorting should go back to the first page
          goBackFirstOnSort: true, // Default is true

          collection: this.collection
        });

        this.$el.append(this.pageableGrid.render().$el);
        this.$el.append(this.paginator.render().el);
        this.collection.initialize({ data: { category: 'all', term: 'all' }});
        this.collection.fetch({
            success: function() {

            }
        });
        return this;
    },

    unrender: function() {
        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        //this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        this.collection.unbind( 'fetch', this.render, this ); // Unbind reference to the model
        //this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view
        Backbone.off("updateGrid");

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node
    },

    savedRegistrant: function(model, view) {
        model.fetch({success: function(model, response, options) {
            view.pageableGrid.body.rows[view.collection.indexOf(model)].render();
        }});
    },

    renderRow: function(model, view) {
        view.pageableGrid.body.rows[this.collection.indexOf(model)].render();
    }

});

var TimelineView = Backbone.View.extend({
    events: {

    },

    initialize: function() {
        _.bindAll(this, 'fetch', 'render', 'unrender');

        this.collection = new Timeline();
        this.collection.on('add', this.render, this); // Event listener on collection
        this.collection.on('change', this.render, this); // Event listener on collection
        this.collection.on('reset', this.render, this); // Event listener on collection
        this.options.parent.on('close:all', this.unrender, this); // Event listener on parent

    },

    fetch: function() {
        this.collection.fetch();
    },

    render: function() {
        var template = Templates.timeline(),
            self = this;
        this.offset = 50;
        $(this.el).html(template);
        $('#timeline', this.el).empty();
        _(this.collection.first(9)).each(function(event) {
            var eventV = new EventView({ model: event, parent: self });
            eventV.on('modelUpdate', self.refresh, self);
            eventV.render();
            $('#timeline', self.el).append(eventV.el);
        });
        //this.delegateEvents();
    },

    unrender: function () {

        console.log('Kill: ', this.cid);

        this.trigger('close:all');
        this.unbind(); // Unbind all local event bindings
        this.collection.unbind( 'add', this.render, this ); // Unbind reference to the model
        this.collection.unbind( 'change', this.render, this ); // Unbind reference to the model
        this.collection.unbind( 'reset', this.render, this ); // Unbind reference to the model
        this.options.parent.unbind( 'close:all', this.close, this ); // Unbind reference to the parent view

        this.remove(); // Remove view from DOM

        delete this.$el; // Delete the jQuery wrapped object variable
        delete this.el; // Delete the variable reference to this node

    }

});
